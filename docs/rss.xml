<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Neo备忘录</title><link>https://hujunalex1.github.io</link><description>记录世界,记录你</description><copyright>Neo备忘录</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/19466514?v=4</url><title>avatar</title><link>https://hujunalex1.github.io</link></image><lastBuildDate>Wed, 03 Sep 2025 06:40:35 +0000</lastBuildDate><managingEditor>Neo备忘录</managingEditor><ttl>60</ttl><webMaster>Neo备忘录</webMaster><item><title>xsh 搜索页数据</title><link>https://hujunalex1.github.io/post/xsh%20-sou-suo-ye-shu-ju.html</link><description>from DrissionPage import WebPage, ChromiumOptions
import time


def get_xiaohongshu_search_results(keyword):
    '''
    使用 DrissionPage 获取小红书搜索结果页数据。</description><guid isPermaLink="true">https://hujunalex1.github.io/post/xsh%20-sou-suo-ye-shu-ju.html</guid><pubDate>Wed, 03 Sep 2025 06:40:02 +0000</pubDate></item><item><title>获取 xsh搜索结果页数据</title><link>https://hujunalex1.github.io/post/huo-qu-%20xsh-sou-suo-jie-guo-ye-shu-ju.html</link><description>`from DrissionPage import WebPage,ChromiumOptions
import time

def get_xiaohongshu_search_results(keyword):
    '''
    使用 DrissionPage 获取小红书搜索结果页数据。</description><guid isPermaLink="true">https://hujunalex1.github.io/post/huo-qu-%20xsh-sou-suo-jie-guo-ye-shu-ju.html</guid><pubDate>Tue, 02 Sep 2025 09:58:19 +0000</pubDate></item><item><title>爬取 x 东商品数据</title><link>https://hujunalex1.github.io/post/pa-qu-%20x%20-dong-shang-pin-shu-ju.html</link><description>```python
import time
import random
from DrissionPage import ChromiumPage,ChromiumOptions

class JDProductSpider:
    def __init__(self):
        '''
        初始化爬虫
        '''
        co = ChromiumOptions()
        co.set_user_data_path('./chrome_data')
        co.set_local_port(9222)
        co.set_argument('--start-maximized')  # 最大化窗口
        co.set_argument('--disable-blink-features=AutomationControlled')  # 避免被检测
        self.page = ChromiumPage(co)
        self.base_url = 'https://search.jd.com/Search'

    def search_products(self, keyword, max_pages=1):
        '''
        搜索商品并获取信息
        '''
        products = []

        for page in range(1, max_pages + 1):
            print(f'正在爬取第 {page} 页...')

            # 构造搜索URL
            search_url = f'{self.base_url}?keyword={keyword}&amp;page={page}'
            print(f'访问URL: {search_url}')
            self.page.get(search_url)

            # 等待页面加载完成
            print('等待页面加载...')
            time.sleep(random.uniform(3, 5))  # 增加等待时间

            # 检查页面标题和内容
            print(f'页面标题: {self.page.title}')
            # 打印部分页面内容用于调试
            print(f'页面部分HTML: {self.page.html[:500]}')

            # 滚动页面以触发懒加载
            print('滚动页面以加载更多内容...')
            for i in range(5):  # 增加滚动次数
                self.page.scroll.down(300)
                time.sleep(1)  # 增加每次滚动后的等待时间

            # 等待元素出现
            print('等待商品元素加载...')
            self.page.wait.eles_loaded('.gl-item', timeout=10)

            # 获取商品列表
            product_items = self.page.eles('.gl-item')
            print(f'找到 {len(product_items)} 个商品元素')

            # 如果没有找到商品，尝试其他选择器
            if len(product_items) == 0:
                print('尝试备用选择器...')
                product_items = self.page.eles('[data-sku]') or self.page.eles('.goods-item')
                print(f'备用选择器找到 {len(product_items)} 个商品元素')

            if len(product_items) == 0:
                print('警告：未找到任何商品元素')
                # 打印更多页面内容用于分析
                print('页面完整HTML结构（前1000字符）:')
                print(self.page.html[:1000])

            for i, item in enumerate(product_items):
                print(f'处理第 {i + 1} 个商品...')
                try:
                    product_info = self._extract_product_info(item)
                    if product_info:
                        products.append(product_info)
                        print(f'已添加商品，当前共 {len(products)} 个商品')
                    else:
                        print('未提取到有效商品信息')

                    # 限制处理数量以便调试
                    # if i &gt;= 2:  # 只处理前3个商品进行测试
                    #     print('为调试目的，仅处理前3个商品')
                    #     break
                except Exception as e:
                    print(f'提取第 {i + 1} 个商品信息时出错: {e}')
                    continue

            time.sleep(random.uniform(2, 3))

        return products

    # 在 _extract_product_info 方法中添加更详细的调试信息
    def _extract_product_info(self, item):
        '''
        提取单个商品信息
        '''
        try:
            print('开始提取商品信息...')

            # 提取标题 - 处理title属性为空的情况
            title_ele = item.ele('.p-name p-name-type-2').ele('tag:a')
            print(f'标题元素: {title_ele}')
            if title_ele:
                print(f'title_ele 的 HTML 内容: {title_ele.html}')
                print(f'title_ele 的所有属性: {title_ele.attrs}')
            else:
                print('title_ele 元素未找到。</description><guid isPermaLink="true">https://hujunalex1.github.io/post/pa-qu-%20x%20-dong-shang-pin-shu-ju.html</guid><pubDate>Mon, 04 Aug 2025 05:47:45 +0000</pubDate></item><item><title>应用推荐</title><link>https://hujunalex1.github.io/post/ying-yong-tui-jian.html</link><description>

## Windows 上好用的软件

- Everything  检索系统各种文件/文件夹等 [下载页面 Download Page](http://www.voidtools.com/)
- 1Clipborad  剪切板内容管理 [下载页面 Download Page](http://1clipboard.io/)
- Sinpaste 截图应用 [下载页面 Download Page](https://zh.snipaste.com/download.html)
- 5kplayer 播放器 支持Airplay [下载页面 Download Page](https://www.5kplayer.com/)
- Foxmail 邮箱应用 [下载页面 Download Page](http://www.foxmail.com/)
- RocketDock 仿mac dock  [下载页面 Download Page](https://rocketdock.com/)
- Geek uninstal 卸载工具 [下载页面 Download Page](https://www.geekuninstaller.com/download)
- Vox  快速搜索系统软件

## Mac 上好用的软件 

- keka 压缩解压
- Mate translate-翻译软件
- itsycal日历
- pap.er 壁纸APP
- popclip-鼠标选中一段文字就可以做复制粘贴的动作
- Clipboards-剪切板工具
- Clipy  剪切板工具
- Alfred -效率神器
- Enpass 密码管理
- Juice：蓝牙管理工具
- OpenInTerminal：在 Finder 中一键打开终端 [链接](https://github.com/Ji4n1ng/OpenInTerminal)
- llNA 开源的播放器
- 截图软件 ： JieTu-腾讯出品 [官网](https://jietu.qq.com/)；Snipaste  [官网](https://zh.snipaste.com/)
- 隐藏菜单栏图标  https://github.com/Mortennn/Dozer
- LocalSend ，一个局域网内开源传输工具
- f.lux  调节屏幕亮度
- Hidden bar  mac 菜单栏工具 
- TheBoringNotch：一个开源的 Mac 刘海工具 [https://theboring.name/](https://theboring.name/)
- nput Source Pro:  自动切换输入法 https://inputsource.pro/zh-CN
- Mos 鼠标滑动优化  https://mos.caldis.me/


## 安卓App 

* gkd 屏广告拦截 : https://gkd.li/   
  规则:  https://registry.npmmirror.com/@aisouler/gkd_subscription/latest/files/dist/AIsouler_gkd.json5
   https://github.com/AIsouler/GKD_subscription
。</description><guid isPermaLink="true">https://hujunalex1.github.io/post/ying-yong-tui-jian.html</guid><pubDate>Wed, 23 Jul 2025 02:02:32 +0000</pubDate></item><item><title>DrissionPage_用法详解</title><link>https://hujunalex1.github.io/post/DrissionPage_-yong-fa-xiang-jie.html</link><description>

## 概述
DrissionPage 是一个功能强大的 Python 网页自动化库，它将 requests 和 selenium 的优点结合在一起，提供了更加灵活高效的网页操作方式。</description><guid isPermaLink="true">https://hujunalex1.github.io/post/DrissionPage_-yong-fa-xiang-jie.html</guid><pubDate>Wed, 23 Jul 2025 01:38:59 +0000</pubDate></item></channel></rss>